Description: Skip already passed tests on subsequent pytest runs
  This is based on the mechanism in Spyder.
Forwarded: not-needed
Origin: https://github.com/spyder-ide/spyder/blob/5.x/conftest.py
Author: Julian Gilbey <jdg@debian.org>
Last-Update: 2024-05-20

--- a/pyproject.toml
+++ b/pyproject.toml
@@ -117,7 +117,7 @@
 xfail_strict = true
 log_cli_level = "info"
 addopts = [
-  "-raXs", "--durations=10", "--color=yes", "--doctest-modules",
+  "-v", "--durations=10", "--color=no", "--doctest-modules",
    "--showlocals", "--strict-markers", "--strict-config"
 ]
 testpaths = [
--- a/tests/conftest.py
+++ b/tests/conftest.py
@@ -1,5 +1,6 @@
 import asyncio
 import os
+import re
 
 if os.name == "nt":
     asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())  # type:ignore
@@ -16,3 +17,36 @@
 @pytest.fixture(autouse=True)
 def setup_environ(jp_environ):
     pass
+
+
+def get_passed_tests():
+    """
+    Get the list of passed tests by inspecting the log generated by pytest.
+
+    This is useful on CIs to restart the test suite from the point where a
+    segfault was thrown by it.
+    """
+    # This assumes the pytest log is placed next to this file. That's where
+    # we put it on CIs.
+    tests = set()
+    if os.path.isfile('pytest_log.txt'):
+        # Detect all tests that passed before.
+        test_re = re.compile(r'(test.*) [^ ]*(SKIPPED|PASSED|XFAIL)')
+        with open('pytest_log.txt') as logfile:
+            for line in logfile:
+                if match := test_re.match(line):
+                    tests.add(match.group(1))
+
+    return tests
+
+
+def pytest_collection_modifyitems(config, items):
+    """
+    Skip tests that passed on a previous run.
+    """
+    passed_tests = get_passed_tests()
+    skip_passed = pytest.mark.skip(reason="Test passed in previous runs")
+
+    for item in items:
+        if item.nodeid in passed_tests:
+            item.add_marker(skip_passed)
